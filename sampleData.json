[
    {
        "UUID": "7901d7b0-0a4f-11ed-861d-0242ac120002",
        "Tags": [
            "type_encoded_string",
            "enc_base64",
            "date_20220410",
            "active"
        ],
        "Data": "A Version 4 UUID is a universally unique identifier that is generated using random numbers. The Version 4 UUIDs produced by this site were generated using a secure random number generator"
    },
    {
        "UUID": "7901da3a-0a4f-11ed-861d-0242ac120002",
        "Tags": [
            "type_plain_string",
            "enc_utf",
            "date_20220211",
            "active"
        ],
        "Data": "JSON stands for JavaScript Object Notion. It is used for sharing data between servers and clients. JavaScript allows us to load local JSON."
    },
    {
        "UUID": "7901db70-0a4f-11ed-861d-0242ac120002",
        "Tags": [
            "type_encoded_string",
            "enc_base64",
            "date_20220305",
            "deleted"
        ],
        "Data": "After reading the file, we parse the data using json() function and display it."
    },
    {
        "UUID": "99351cb2-0aa5-11ed-861d-0242ac120002",
        "Tags": [
            "enc_base86",
            "date_20210305",
            "deleted"
        ],
        "Data": "In case you are wondering which one will perform better if the string is too big, ‘regex.test’ is the fastest, followed by ‘string.search’ from ES6 libraries"
    },
    {
        "UUID": "99351e88-0aa5-11ed-861d-0242ac120002",
        "Tags": [
            "64_encode",
            "date_20210605",
            "active"
        ],
        "Data": "I use it to search for a class in an element without jQuery and it works pretty fast and fine."
    },
    {
        "UUID": "993524c8-0aa5-11ed-861d-0242ac120002",
        "Tags": [
            "type_plain_string",
            "date_20210605",
            "undefined",
            "enc_utf"
        ],
        "Data": "I am tagging few languages because I just need the filtering logic on any language."
    },
    {
        "UUID": "9935259a-0aa5-11ed-861d-0242ac120002",
        "Tags": [
            "type_plain_string",
            "date_20220612",
            "undefined",
            "active"
        ],
        "Data": "Let's learn how to convert JavaScript array to string with or without commas. Example code included."
    },
    {
        "UUID": "99352676-0aa5-11ed-861d-0242ac120002",
        "Tags": [
            "type_encoded_string",
            "date_20221012",
            "deleted"
        ],
        "Data": "Benchmark for a very big string and repeating the sub-string 1000 times."
    },
    {
        "UUID": "9935275c-0aa5-11ed-861d-0242ac120002",
        "Tags": [
            "type_plain_string",
            "enc_utf",
            "date_20220812",
            "deleted"
        ],
        "Data": "To convert a JavaScript array into a string, you can use the built-in Array method called toString"
    },
    {
        "UUID": "99352842-0aa5-11ed-861d-0242ac120002",
        "Tags": [
            "enc_utf",
            "date_20200812",
            "undefined"
        ],
        "Data": "javascript convert in a string the items of an array"
    },
    {
        "UUID": "c9cf98ff-c44e-4402-b243-8a6abbbc5cd4",
        "Tags": [
            "enc_base86",
            "type_plain_string",
            "date_20200812",
            "active"
        ],
        "Data": "JavaScript's sort function is typically O(n log n)"
    },
    {
        "UUID": "2dda4a1d-07b3-48e9-bab3-3d305d8049fe",
        "Tags": [
            "type_plain_string",
            "enc_base64",
            "date_20220716",
            "deleted"
        ],
        "Data": "Free Online UUID/GUID Generator Tool."
    },
    {
        "UUID": "19a64ac1-7f5d-4afd-9c53-c197b8182c5b",
        "Tags": [],
        "Data": "The time and space complexity of the sort cannot be guaranteed as it depends on the implementation."
    },
    {
        "UUID": "e26c3b2b-8053-4034-b174-d1210997598a",
        "Tags": [
            "active"
        ],
        "Data": "TensorFlow.js is a library for machine learning in JavaScript"
    },
    {
        "UUID": "70d84833-f5cd-42a1-b9ff-aed949dfce2e",
        "Tags": [
            "deleted",
            "date_20190305",
            "javascript"
        ],
        "Data": "If you are using ES6 you can use the spread operator"
    },
    {
        "UUID": "3b339e62-57ad-416d-be77-d98e058021fc",
        "Tags": [
            "active",
            "date_20180305",
            "python",
            "type_plain_string"
        ],
        "Data": "Use off-the-shelf JavaScript models or convert Python TensorFlow models to run in the browser or under Node.js"
    },
    {
        "UUID": "ae4b5eda-4cfc-4905-a7a6-5cc0e29d5683",
        "Tags": [
            "deleted",
            "date_20100305",
            "c++",
            "enc_base64",
            "type_plain_string"
        ],
        "Data": "Retrain pre-existing ML models using your own data."
    },
    {
        "UUID": "6c290f05-a183-472d-8050-0b7ed765188d",
        "Tags": [
            "active",
            "date_20100805",
            "enc_base64",
            "deleted"
        ],
        "Data": "Build and train models directly in JavaScript using flexible and intuitive APIs."
    },
    {
        "UUID": "45babbce-dfdc-497e-928e-1e8e52215483",
        "Tags": [
            "deleted"
        ],
        "Data": "Data Date Challenge"
    },
    {
        "UUID": "91e37a2f-8177-4ea3-98d5-ce9269d8ca90",
        "Tags": [
            "date_20161005"
        ],
        "Data": "Performance RNN was trained in TensorFlow on MIDI from piano performances"
    },
    {
        "UUID": "759a1930-d551-4810-84eb-6301d2d7188b",
        "Tags": [
            "enc_base64",
            "c++",
            "active",
            "date_20100305",
            "date_20100305"
        ],
        "Data": "When there is no compare function passed, all the non-undefined elements of the array are converted to strings first"
    },
    {
        "UUID": "af55ad63-7895-4260-98b5-5c3811807edc",
        "Tags": [
            "type_encoded_string",
            "c++",
            "active",
            "python",
            "date_20100305"
        ],
        "Data": "Consequently, nlogn lower bound does not apply to these sorting algorithms."
    },
    {
        "UUID": "d0ae4798-85a5-4b5f-acdb-633e2c40680f",
        "Tags": [
            "type_encoded_string",
            "enc_base64",
            "date_20220410",
            "active"
        ],
        "Data": "Here we can store numbers in an array and apply this method to sort the array."
    },
    {
        "UUID": "2471a10d-fd75-4523-8bc0-7b70bc060179",
        "Tags": [
            "javascript",
            "datadate",
            "date_20230410",
            "active"
        ],
        "Data": "A sorting algorithm is In-place if the algorithm does not use extra space for manipulating the input but may require a small though nonconstant extra space for its operation."
    },
    {
        "UUID": "7fbd3457-de4c-41b7-9d90-ae6a53ceb30b",
        "Tags": [
            "javascript",
            "datadate",
            "deleted",
            "date_20000812"
        ],
        "Data": "A sorting algorithm is stable if it does not change the order of elements with the same value."
    },
    {
        "UUID": "358f7477-9d74-4907-8fea-43136492d1d0",
        "Tags": [
            "c",
            "datadate",
            "type_encoded_string",
            "deleted"
        ],
        "Data": "Data Date Challenge"
    },
    {
        "UUID": "5919884e-a3b5-4930-ae1a-8b41f23472ae",
        "Tags": [
            "go",
            "date_20161005",
            "enc_base64",
            "deleted"
        ],
        "Data": "The algorithm that accepts a new element while the sorting process is going on, that algorithm is called the online sorting algorithm."
    },
    {
        "UUID": "5ccc68a6-e47d-4e0e-8072-48462147098f",
        "Tags": [
            "go",
            "date_20161005",
            "enc_base64",
            "deleted"
        ],
        "Data": "the above sorting algorithms, the insertion sort is online."
    },
    {
        "UUID": "87da156b-142f-4388-a98b-b4aa2c442c8a",
        "Tags": [],
        "Data": "the above sorting algorithms, the insertion sort is online."
    },
    {
        "UUID": "3f4d5007-b767-4145-bea4-76dd9c112ef7",
        "Tags": [
            "go",
            "date_20161015",
            "deleted"
        ],
        "Data": "Knowing which algorithm is best possible depends heavily on details of the application and implementation"
    },
    {
        "UUID": "6657cd4a-eb6c-4367-9459-48ec5eceee30",
        "Tags": [
            "javascript",
            "type_plain_string",
            "enc_base64",
            "active"
        ],
        "Data": "In some cases, We often use sorting as a key routine to solve several coding problems."
    },
    {
        "UUID": "aae116b8-45d4-4c96-9e73-d99a8fc634a7",
        "Tags": [
            "javascript",
            "date_20001012",
            "enc_utf",
            "active"
        ],
        "Data": "Understanding the sorting algorithms are the best way to learn problem solving and complexity analysis in the algorithms."
    },
    {
        "UUID": "f2969b35-3817-4f8c-9d3a-60dd851529b8",
        "Tags": [
            "javascript",
            "date_20001012",
            "enc_utf",
            "deleted",
            "datadate",
            "active",
            "python"
        ],
        "Data": "n most practical situations, quicksort is a popular algorithm for sorting large input arrays because its expected running time is O(nlogn)."
    },
    {
        "UUID": "61396f1a-418f-4da7-9813-be01b004e322",
        "Tags": [
            "javascript",
            "date_20150312",
            "type_plain_string",
            "deleted",
            "datadate"
        ],
        "Data": "If stability is important and space is available, the merge sort might be the best choice for the implementation"
    },
    {
        "UUID": "a01b4660-fd52-4359-b493-688612d7a96a",
        "Tags": [
            "python",
            "date_20221012",
            "type_encoded_string",
            "active",
            "datadate"
        ],
        "Data": "Like insertion sort, quick sort has tight code and hidden constant factor in its running time is small."
    }
]